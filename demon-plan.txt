DEMON

A DEMON peer can connect to multiple other DEMON peers. Each DEMON peer uses RSA for security. This RSA key is typically 1024-bit but can be any length >= 1024, and the public exponent is always 0x10001. The public n (big-endian) is then PEM base64 encoded.

Connections are via a transport mechanism (described below) using a single port, which may be any port number.

Objects are identified by their Tiger hashes. These are then broken down into segments, each of which has a Tiger hash. Each segment is up to 512 KiB in length.

A peer will connect to any other number of peers.

Messages on channel 0 are sent as individual packets on the transport layer.

Peers are identified by their IP (v4 or v6), a ; sign, the port number, a ; sign, the name of the transport layer in use, a ; sign and the base64 of their RSA pubkey n.

On connection to a peer, the connector is assumed to have the RSA pubkey of the host. The connector sends, encrypted with the host's pubkey, its own peer ID, prefixed with a 2-byte big endian int indicating the length. The host then sends, encrypted with the connector's RSA pubkey and then its own private key, the AES-256 key and IV in that order (to a total of 48 bytes). This all occurs on channel 0 of the transport.

RSA encryptions are padded with EME-OAEP padding for public->private as defined in PKCS #1 v2.0 with SHA1, MGF1 and an empty encoding parameter, and PKCS1 padding for private->public.

Peers may be 'trusted' or 'untrusted,' trust will spread through the trust-sharing mechanism. Trusted peers should be stored in a DB on the user's system. Trust can be suggested by trackers.

Messages are encrypted with the AES key, and are prefixed with a 2-byte length in big-endian format. All such messages are sent on channel 0.

Such messages:
  REQUEST <object-id> <part-number>
  This requests the transfer of an object and part.
  
  REQUEST-FORWARD <object-id> <segment-number> <peer> <ttl>
  This is used when a peer is asked for a file and does not have that file; the request will be forwarded to one other peer randomly. If this request is received by a peer without that object or part, it is again forwarded to another host different from the original with the ttl minus one. If this request is received with ttl = 0, it is discarded. ttl begins at 60. If handled, this message is not passed on, and the peer closes a connection to one peer if the limit is exceeded and connects to the new peer.
  
  OPEN
  This is used by a peer to indicate that it can handle another connection.
  
  OPEN-FORWARD <peer> <ttl>
  This is used to forward open messages, to another random peer different from the origin, with ttl - 1. ttl begins at 60. If it used to make another connection, the message can be discarded.
  
  DHTDB-PUT <keyhash> <timestamp> <object-id> <length>
  DHT database PUT operation. If there are any peers where the difference between the Tiger hash of their Peer ID and keyhash is less than that same distance for the receiver, forward to them; otherwise, keep. The key and value are stored in a local database. This is discarded if a keyhash is already received for a newer or equal timestamp. This is sent only between trusted peers.
  
  DHTDB-GET <keyhash>
  DHT database GET operation. This is sent by a peer to a *closer* peer to that keyhash, as a request for the value of a keyhash. This is sent only between trusted peers.
  
  DHTDB-VALUE <keyhash> <timestamp> <object-id> <length>
  DHT database reply of GET operation. Sent back along the chain. This is sent only between trusted peers.
  
  REQUEST-FULL <object-id>
  Requests the full version of an object ID to be transferred in one go. This is only sent to trusted hosts.
  
  CAN-TRUST <peer>
  Request confirmation or denial of being able to trust a given peer.
  
  TRUST-STATUS <peer> <yes|no>
  Reports trustworthiness of a peer.
  
  TRUST-REVOKE <peer>
  Revokes trust of a given peer ID. This should be sent to all peers other than the sender, unless trust does not already exist for the given peer. If received, the receiver MAY disconnect from that peer if it is connected directly.
  
  XCMD <command> <line>
  Extended command, for the use of plugins.
  
  EXPECT <callsign> <object-id> <segment-number> <length>
  Expect the transfer of an object on the channel 1. The callsign is a hex-encoded 64-bit random number. The segment number can be 'full' for an entire file expected.
  
On channel 1, the uploader sends, encrypted with the session key:
  <callsign, as 8 bytes big-endian>, followed by the contents of that segment

Each peer sets a maximum number of other peers to which to maintain connections. While it has more than 5 free slots, it will periodically (eg every 20 seconds or so) send OPEN messages to a random peer.

It should maintain a list of peers sorted by the time the last segment was received from that peer. When the maximum peer count is reached, it should disconnect the bottom 3 peers on that list.

The specification defines four available transports, which are required, but others may be specified. All transports must have the following properties:
  Data are sent in packets, which are guaranteed to arrive without corruption via checksums or other equivalent methods. These packets are atomic, and may be any size: it is the job of the transport to split these into smaller pieces if needed.
  Data are sent on one of two channels, which may be queued independently; these are identified as channels 0 and 1.
  Data are sequenced: all messages on any channel must be processed after all previous messages on that channel.
  Data are sent either reliably or unreliably. Unreliable messages may be reliable, but reliable messages are guaranteed to arrive. At present, unreliable messages are never used.

The transports are defined as follows:

(1) tcp
  This is a basic TCP connection between two hosts. Packets are encoded prefixed with a 4-byte length in big-endian byte order, with the bit 0x80000000 indicating channel 1 as opposed to channel 0. Channels 0 and 1 are not independently sequenced and all messages are reliable.
(2) http
  This means connections over http. Requests are done on the path /demon/comms using the POST method. The header DEMON-Channel: (0|1) must be specified. Requests must be repeated until a response is made. A zero-sized reply is expected.
(3) https
  As for http, but with the caveat that the communications are under SSL.
(4) udp
  This is assumed to be the default. Packets should begin with a 16-byte header, in big-endian byte order, with the following structure:
  +---------------+-------+-------+
  | Message ID    | Flags | Chan  |
  |-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  The message ID should be monotonically increasing, but separate counters for reliable and unreliable messages, and for the different channels. The channel indicates the ordering channel. Flags are as follows:
    0x00000001 Reliable - please send back an acknowledgement of this message
    0x00000002 Acknowledge - the contents contains a message ID of a previous message, acknowledging
  If no ACK is received, resending is done after a short period of time.
  If a reliable message is received and not all previous message IDs have been received, wait for previous messages before handling.
  If an unreliable message is received and a later message ID has already been received, discard.
